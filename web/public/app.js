const applicationState={currentPage:"dashboard",dashboardState:{refreshInterval:null,refreshRate:3e3,metricsCache:null},modbusState:{refreshInterval:null,refreshRate:5e3,groups:[],groupsInitialized:!1},modalsState:{addGroupPending:!1,editGroupPending:!1,editGroupId:null,deleteGroupPending:!1,deleteGroupId:null}};async function apiCall(e,t,a=null){try{const s={method:e,headers:{"Content-Type":"application/json"}};!a||"POST"!==e&&"PATCH"!==e||(s.body=JSON.stringify(a));const r=await fetch(t,s);if(!r.ok){const e=(await r.json().catch(()=>({}))).error||`HTTP ${r.status}: ${r.statusText}`;throw new Error(e)}return await r.json()}catch(e){throw console.error("API Error:",e),e}}function initializeDashboardMetrics(){document.getElementById("metrics_container").innerHTML=["Uptime","UART 1 Sent Packets","UART 1 Received Packets","UART 2 Sent Packets","UART 2 Received Packets","Ethernet Status","Ethernet IP"].map((e,t)=>`\n                <div class="metric_card">\n                    <div class="metric_label">${e}</div>\n                    <div class="metric_value" data-metric-index="${t}">--</div>\n                </div>\n            `).join(""),applicationState.dashboardState.metricsCache={}}async function updateDashboardMetrics(){try{const e=await apiCall("GET","/api/status"),t=[formatUptime(e.uptime),String(e.uart1_sent),String(e.uart1_recived),String(e.uart2_sent),String(e.uart2_recived),e.eth_status,e.eth_ip||"None"];document.querySelectorAll(".metric_value").forEach((e,a)=>{e.textContent=t[a]}),clearMessage("dashboard_message")}catch(e){showMessage("dashboard_message","error",`Error: ${e.message}`)}}function formatUptime(e){const t=Math.floor(e/86400),a=Math.floor(e%86400/3600),s=Math.floor(e%3600/60),r=e%60;return t>0?`${t}d ${a}h`:a>0?`${a}h ${s}m`:s>0?`${s}m ${r}s`:`${r}s`}function startDashboardRefresh(){applicationState.dashboardState.refreshInterval&&clearInterval(applicationState.dashboardState.refreshInterval),initializeDashboardMetrics(),updateDashboardMetrics(),applicationState.dashboardState.refreshInterval=setInterval(()=>{updateDashboardMetrics()},applicationState.dashboardState.refreshRate)}function stopDashboardRefresh(){applicationState.dashboardState.refreshInterval&&(clearInterval(applicationState.dashboardState.refreshInterval),applicationState.dashboardState.refreshInterval=null)}async function loadInterfaces(){try{showMessage("interfaces_message","loading",'<span class="loading_spinner"></span> Loading settings...');populateInterfacesForm(await apiCall("GET","/api/interfaces")),clearMessage("interfaces_message")}catch(e){showMessage("interfaces_message","error",`Error: ${e.message}`)}}function populateInterfacesForm(e){document.getElementById("uart1_baud").value=e.uart1_baud,document.getElementById("uart1_data").value=e.uart1_data,document.getElementById("uart1_stop").value=e.uart1_stop,document.getElementById("uart1_parity").value=e.uart1_parity,document.getElementById("uart2_baud").value=e.uart2_baud,document.getElementById("uart2_data").value=e.uart2_data,document.getElementById("uart2_stop").value=e.uart2_stop,document.getElementById("uart2_parity").value=e.uart2_parity}async function saveInterfaces(e){e.preventDefault();try{showMessage("interfaces_message","loading",'<span class="loading_spinner"></span> Saving settings...');const e={uart1_baud:document.getElementById("uart1_baud").value,uart1_data:document.getElementById("uart1_data").value,uart1_stop:document.getElementById("uart1_stop").value,uart1_parity:document.getElementById("uart1_parity").value,uart2_baud:document.getElementById("uart2_baud").value,uart2_data:document.getElementById("uart2_data").value,uart2_stop:document.getElementById("uart2_stop").value,uart2_parity:document.getElementById("uart2_parity").value};await apiCall("POST","/api/interfaces",e),showMessage("interfaces_message","success","Settings saved successfully!"),setTimeout(()=>clearMessage("interfaces_message"),3e3)}catch(e){showMessage("interfaces_message","error",`Error: ${e.message}`)}}async function loadModbusConfig(){try{showMessage("modbus_message","loading",'<span class="loading_spinner"></span> Loading configuration...');const e=await apiCall("GET","/api/modbus/groups");applicationState.modbusState.groups=e,displayModbusGroups(),applicationState.modbusState.groupsInitialized=!0,clearMessage("modbus_message"),applicationState.modbusState.refreshInterval&&clearInterval(applicationState.modbusState.refreshInterval),startModbusRefresh()}catch(e){showMessage("modbus_message","error",`Error: ${e.message}`)}}function displayModbusGroups(){const e=document.getElementById("groups_container");0!==applicationState.modbusState.groups.length?(e.innerHTML=applicationState.modbusState.groups.map(e=>createGroupColumn(e)).join(""),applicationState.modbusState.groups.forEach(e=>{updateModbusGroupValues(e.id)})):e.innerHTML='<div style="grid-column: 1/-1; text-align: center; padding: 40px; color: #7f8c8d;">No outdoor devices configured</div>'}function createGroupColumn(e){let t="";e.registers&&e.registers.length>0?(t='<div class="registers_section"><div class="registers_header"><h4>Outdoor Registers</h4><button type="button" class="btn_mini" onclick="openRegisterModal('+e.id+')">Edit</button></div>',e.registers.forEach(e=>{const a="object"==typeof e?e.id:e,s="object"==typeof e?e.name:"Register";t+=`\n\t\t\t\t<div class="register_item" data-register-type="group" data-register-id="${a}">\n\t\t\t\t\t<span class="register_id">${s} (${a})</span>\n\t\t\t\t\t<span class="register_value">--</span>\n\t\t\t\t</div>\n\t\t\t`}),t+="</div>"):t='<div class="registers_section"><div class="registers_header"><h4>Outdoor Registers</h4><button type="button" class="btn_mini" onclick="openRegisterModal('+e.id+')">Edit</button></div><div class="empty_state">No registers configured</div></div>';let a="";return e.slaves&&e.slaves.length>0&&e.slaves.forEach(t=>{a+=`\n\t\t\t\t<div class="registers_section">\n\t\t\t\t\t<div class="slave_item">\n\t\t\t\t\t\t<div class="registers_header">\n\t\t\t\t\t\t\t<div class="slave_header">Indoor ${t.id}</div>\n\t\t\t\t\t\t\t<button type="button" class="btn_mini" onclick="openRegisterModal(${e.id}, ${t.id})">Edit</button>\n\t\t\t\t\t\t</div>\n\t\t\t`,t.registers&&t.registers.length>0?t.registers.forEach(e=>{const s="object"==typeof e?e.id:e,r="object"==typeof e?e.name:"Register";a+=`\n\t\t\t\t\t\t<div class="register_item" data-register-type="slave" data-slave-id="${t.id}" data-register-id="${s}">\n\t\t\t\t\t\t\t<span class="register_id">${r} (${s})</span>\n\t\t\t\t\t\t\t<span class="register_value">--</span>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t`}):a+='<div class="empty_state">No registers configured</div>',a+="</div></div>"}),`\n\t\t<div class="group_column" data-group-id="${e.id}">\n\t\t\t<div class="group_header">\n\t\t\t\t<h3>${e.name}</h3>\n\t\t\t\t<div class="group_header_actions">\n\t\t\t\t\t<button type="button" class="btn_secondary" onclick="openEditGroupModal(${e.id})">Edit</button>\n\t\t\t\t\t<button type="button" class="btn_danger" onclick="openDeleteGroupModal(${e.id})">Delete</button>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t\t<div class="group_content">\n\t\t\t\t<div id="group_registers_${e.id}">\n\t\t\t\t\t${t}\n\t\t\t\t\t${a}\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</div>\n\t`}async function updateModbusGroupValues(e){try{const t=await apiCall("GET",`/api/modbus/group?id=${e}`),a=document.querySelector(`[data-group-id="${e}"]`);if(!a)return;t.register&&t.register.length>0&&t.register.forEach(e=>{const t=a.querySelector(`[data-register-type="group"][data-register-id="${e.id}"] .register_value`);t&&(t.textContent=e.value)}),t.slaves&&t.slaves.length>0&&t.slaves.forEach(e=>{e.register&&e.register.length>0&&e.register.forEach(t=>{const s=a.querySelector(`[data-register-type="slave"][data-slave-id="${e.id}"][data-register-id="${t.id}"] .register_value`);s&&(s.textContent=t.value)})})}catch(t){console.error(`Error updating group ${e}:`,t)}}function startModbusRefresh(){const e=parseInt(document.getElementById("refresh_rate").value);applicationState.modbusState.refreshRate=e,applicationState.modbusState.refreshInterval&&clearInterval(applicationState.modbusState.refreshInterval),applicationState.modbusState.refreshInterval=setInterval(()=>{applicationState.modbusState.groups.forEach(e=>{updateModbusGroupValues(e.id)})},applicationState.modbusState.refreshRate)}function stopModbusRefresh(){applicationState.modbusState.refreshInterval&&(clearInterval(applicationState.modbusState.refreshInterval),applicationState.modbusState.refreshInterval=null)}function openAddGroupModal(){document.getElementById("add_group_modal").classList.add("active"),document.getElementById("modal_group_id").value="",document.getElementById("modal_group_slave").value="",clearModalMessage("add_group_modal_message"),document.getElementById("modal_group_id").focus()}function closeAddGroupModal(){document.getElementById("add_group_modal").classList.remove("active"),applicationState.modalsState.addGroupPending=!1}async function submitAddGroupModal(){const e=document.getElementById("modal_group_id").value,t=document.getElementById("modal_group_slave").value;if(e&&t){if(!applicationState.modalsState.addGroupPending)try{applicationState.modalsState.addGroupPending=!0,showModalMessage("add_group_modal_message","loading",'<span class="loading_spinner"></span> Creating group...'),await apiCall("POST",`/api/modbus/group/create?id=${e}&slave=${t}`),closeAddGroupModal(),await loadModbusConfig(),showMessage("modbus_message","success","Outdoor device created successfully!"),setTimeout(()=>clearMessage("modbus_message"),3e3)}catch(e){showModalMessage("add_group_modal_message","error",`Error: ${e.message}`),applicationState.modalsState.addGroupPending=!1}}else showModalMessage("add_group_modal_message","error","Please enter both Modbus Address and Indoor Device Number")}function openEditGroupModal(e){applicationState.modalsState.editGroupId=e;const t=applicationState.modbusState.groups.find(t=>t.id===e),a=t?t.slaves.length:0;document.getElementById("edit_group_modal").classList.add("active"),document.getElementById("modal_edit_group_slave").value=a,clearModalMessage("edit_group_modal_message"),document.getElementById("modal_edit_group_slave").focus()}function closeEditGroupModal(){document.getElementById("edit_group_modal").classList.remove("active"),applicationState.modalsState.editGroupPending=!1,applicationState.modalsState.editGroupId=null}async function submitEditGroupModal(){const e=applicationState.modalsState.editGroupId,t=document.getElementById("modal_edit_group_slave").value;if(t){if(!applicationState.modalsState.editGroupPending)try{applicationState.modalsState.editGroupPending=!0,showModalMessage("edit_group_modal_message","loading",'<span class="loading_spinner"></span> Updating group...'),await apiCall("PATCH",`/api/modbus/group/update?id=${e}&slave=${t}`),closeEditGroupModal(),await loadModbusConfig(),showMessage("modbus_message","success","Outdoor device updated successfully!"),setTimeout(()=>clearMessage("modbus_message"),3e3)}catch(e){showModalMessage("edit_group_modal_message","error",`Error: ${e.message}`),applicationState.modalsState.editGroupPending=!1}}else showModalMessage("edit_group_modal_message","error","Please enter number of indoor devices")}function openDeleteGroupModal(e){applicationState.modalsState.deleteGroupId=e,document.getElementById("delete_group_modal").classList.add("active"),clearModalMessage("delete_group_modal_message")}function closeDeleteGroupModal(){document.getElementById("delete_group_modal").classList.remove("active"),applicationState.modalsState.deleteGroupPending=!1,applicationState.modalsState.deleteGroupId=null}async function submitDeleteGroupModal(){const e=applicationState.modalsState.deleteGroupId;if(!applicationState.modalsState.deleteGroupPending)try{applicationState.modalsState.deleteGroupPending=!0,showModalMessage("delete_group_modal_message","loading",'<span class="loading_spinner"></span> Deleting group...'),await apiCall("DELETE",`/api/modbus/group/delete?id=${e}`),closeDeleteGroupModal(),await loadModbusConfig(),showMessage("modbus_message","success","Outdoor device deleted successfully!"),setTimeout(()=>clearMessage("modbus_message"),3e3)}catch(e){showModalMessage("delete_group_modal_message","error",`Error: ${e.message}`),applicationState.modalsState.deleteGroupPending=!1}}let registerModalState={groupId:null,slaveId:null,registers:[],editMode:!1};function openRegisterModal(e,t=null){registerModalState.groupId=e,registerModalState.slaveId=t,registerModalState.editMode=!1;const a=applicationState.modbusState.groups.find(t=>t.id===e);if(a){if(null!==t){const e=a.slaves.find(e=>e.id===t);if(!e)return;registerModalState.registers=JSON.parse(JSON.stringify(e.registers||[])),document.getElementById("register_modal_title").textContent=`Manage Registers - ${a.name} - Indoor ${t}`}else registerModalState.registers=JSON.parse(JSON.stringify(a.registers||[])),document.getElementById("register_modal_title").textContent=`Manage Registers - ${a.name}`;renderRegisterList(),document.getElementById("register_modal").classList.add("active")}}function closeRegisterModal(){document.getElementById("register_modal").classList.remove("active"),registerModalState={groupId:null,slaveId:null,registers:[],editMode:!1}}function renderRegisterList(){const e=document.getElementById("register_list");let t="";registerModalState.registers.forEach((e,a)=>{registerModalState.editMode?t+=`\n\t\t\t\t<div class="register_row" data-index="${a}">\n\t\t\t\t\t<input type="number" class="register_input" value="${e.id}" data-field="id" />\n\t\t\t\t\t<input type="text" class="register_input" value="${e.name}" data-field="name" />\n\t\t\t\t\t<button type="button" class="btn_icon" onclick="deleteRegisterRow(${a})" title="Delete">×</button>\n\t\t\t\t</div>\n\t\t\t`:t+=`\n\t\t\t\t<div class="register_row register_row_view">\n\t\t\t\t\t<span class="register_display">${e.id}</span>\n\t\t\t\t\t<span class="register_display">${e.name}</span>\n\t\t\t\t\t<span class="register_spacer"></span>\n\t\t\t\t</div>\n\t\t\t`}),t+='\n\t\t<div class="register_row register_row_new">\n\t\t\t<input type="number" class="register_input" id="new_register_id" placeholder="Address" />\n\t\t\t<input type="text" class="register_input" id="new_register_name" placeholder="Name" />\n\t\t\t<button type="button" class="btn_primary btn_sm" onclick="addNewRegister()">Add</button>\n\t\t</div>\n\t',registerModalState.editMode?t+='<div class="register_actions"><button type="button" class="btn_primary" onclick="saveRegisterChanges()">Save</button><button type="button" class="btn_secondary" onclick="cancelRegisterEdit()">Cancel</button></div>':t+='<div class="register_actions"><button type="button" class="btn_secondary" onclick="enableRegisterEdit()">Edit Registers</button></div>',e.innerHTML=t}function enableRegisterEdit(){registerModalState.editMode=!0,renderRegisterList()}function cancelRegisterEdit(){registerModalState.editMode=!1,openRegisterModal(registerModalState.groupId,registerModalState.slaveId)}async function saveRegisterChanges(){try{clearModalMessage("register_modal_message");const e=document.querySelectorAll(".register_row[data-index]"),t=[];e.forEach(e=>{const a=parseInt(e.getAttribute("data-index")),s=e.querySelector('[data-field="id"]'),r=e.querySelector('[data-field="name"]'),o=parseInt(s.value),d=r.value.trim();if(!d)throw new Error("Register name cannot be empty");t.push({id:o,name:d,originalIndex:a})});const a=t.map(e=>e.id);if(new Set(a).size!==a.length)throw new Error("Duplicate register IDs found");showModalMessage("register_modal_message","loading",'<span class="loading_spinner"></span> Saving changes...');for(let e=0;e<t.length;e++){const a=t[e],s=registerModalState.registers[a.originalIndex];if(s.id!==a.id||s.name!==a.name){const e=null!==registerModalState.slaveId?`/api/modbus/group/update/register?id=${registerModalState.groupId}&slave=${registerModalState.slaveId}`:`/api/modbus/group/update/register?id=${registerModalState.groupId}`;await apiCall("PATCH",e,{id:s.id,newId:a.id,name:a.name})}}registerModalState.registers=t.map(e=>({id:e.id,name:e.name})),registerModalState.editMode=!1,await loadModbusConfig(),renderRegisterList(),showModalMessage("register_modal_message","success","Registers updated successfully!"),setTimeout(()=>clearModalMessage("register_modal_message"),2e3)}catch(e){showModalMessage("register_modal_message","error",`Error: ${e.message}`)}}async function addNewRegister(){try{clearModalMessage("register_modal_message");const e=document.getElementById("new_register_id"),t=document.getElementById("new_register_name"),a=parseInt(e.value),s=t.value.trim();if(!a||!s)return void showModalMessage("register_modal_message","error","Please enter both Address and Name");if(registerModalState.registers.some(e=>e.id===a))return void showModalMessage("register_modal_message","error","Register with this Address already exists");showModalMessage("register_modal_message","loading",'<span class="loading_spinner"></span> Adding register...');const r=null!==registerModalState.slaveId?`/api/modbus/group/update/register?id=${registerModalState.groupId}&slave=${registerModalState.slaveId}`:`/api/modbus/group/update/register?id=${registerModalState.groupId}`;await apiCall("POST",r,{id:a,name:s}),registerModalState.registers.push({id:a,name:s}),e.value="",t.value="",await loadModbusConfig(),renderRegisterList(),showModalMessage("register_modal_message","success","Register added successfully!"),setTimeout(()=>clearModalMessage("register_modal_message"),2e3)}catch(e){showModalMessage("register_modal_message","error",`Error: ${e.message}`)}}async function deleteRegisterRow(e){try{const t=registerModalState.registers[e];showModalMessage("register_modal_message","loading",'<span class="loading_spinner"></span> Deleting register...');const a=null!==registerModalState.slaveId?`/api/modbus/group/update/register?id=${registerModalState.groupId}&slave=${registerModalState.slaveId}&registerId=${t.id}`:`/api/modbus/group/update/register?id=${registerModalState.groupId}&registerId=${t.id}`;await apiCall("DELETE",a),registerModalState.registers.splice(e,1),await loadModbusConfig(),renderRegisterList(),showModalMessage("register_modal_message","success","Register deleted successfully!"),setTimeout(()=>clearModalMessage("register_modal_message"),2e3)}catch(e){showModalMessage("register_modal_message","error",`Error: ${e.message}`)}}function showMessage(e,t,a){const s=document.getElementById(e);s.className=`status_message status_${t}`,s.innerHTML=a}function clearMessage(e){const t=document.getElementById(e);t.innerHTML="",t.className=""}function showModalMessage(e,t,a){const s=document.getElementById(e);s.className=`modal_message ${t}`,s.innerHTML=a}function clearModalMessage(e){const t=document.getElementById(e);t.innerHTML="",t.className=""}function navigateToPage(e){stopDashboardRefresh(),stopModbusRefresh(),document.querySelectorAll(".page").forEach(e=>{e.classList.remove("active")}),document.querySelectorAll(".nav_link").forEach(e=>{e.classList.remove("active")}),document.getElementById(e).classList.add("active"),document.querySelector(`[data-page="${e}"]`).classList.add("active"),applicationState.currentPage=e,"dashboard"===e?startDashboardRefresh():"interfaces"===e?loadInterfaces():"modbus"===e&&loadModbusConfig()}document.addEventListener("DOMContentLoaded",function(){document.querySelectorAll(".nav_link").forEach(e=>{e.addEventListener("click",function(){navigateToPage(this.getAttribute("data-page"))})}),document.getElementById("interfaces_form").addEventListener("submit",saveInterfaces),document.getElementById("add_group_btn").addEventListener("click",openAddGroupModal),document.getElementById("refresh_rate").addEventListener("change",function(){applicationState.modbusState.refreshRate=parseInt(this.value),"modbus"===applicationState.currentPage&&startModbusRefresh()}),document.getElementById("add_group_modal").addEventListener("click",function(e){e.target===this&&closeAddGroupModal()}),document.getElementById("edit_group_modal").addEventListener("click",function(e){e.target===this&&closeEditGroupModal()}),document.getElementById("delete_group_modal").addEventListener("click",function(e){e.target===this&&closeDeleteGroupModal()}),navigateToPage("dashboard")});